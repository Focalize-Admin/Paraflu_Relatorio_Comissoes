<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Comissões_Individuais" xml:space="preserve">
    <value>SELECT 
"Check",
"Doc",
"ObjType",
"DocEntry",
"DocDate",
"CardName",
"SlpCode",
"SlpName",
"Serial",
"Total",
"Comissao",
"U_FOC_CodPN"
From "FOC_Comissao" 
Where
"SlpCode" = 'Vendedor'
And "DocDate" between 'Dataini' And 'Datafim'</value>
  </data>
  <data name="Notas_Fiscais_HANA" xml:space="preserve">
    <value>Select  
'N' as "Selecionado",
"SlpCode" as "Código",
"SlpName" as "Nome do Vendedor",
"Email" as "Email do vendedor",
null as "Data de geração",
sum("LineTotal") as "Total",
sum("IPI") as "IPI",
sum("ICMSST") as "ICMS-ST",
sum(("LineTotal" + ifnull("IPI", 0) + ifnull("ICMSST", 0))*("Com") )/100 as "Comissão"
 from 
 
 (

SELECT
'NS' "Doc",
T0."ObjType",
T0."DocEntry", 
T0."DocDate", 
T0."DocDueDate", 
T0."CardCode", 
T0."CardName", 
T0."SlpCode", 
T2."SlpName",
T2."Email",
T0."Serial", 
T1."ItemCode", 
T1."Dscription", 
T1."Quantity", 
T1."Price", 
T1."LineTotal"*(1 - (T0."DiscPrcnt"/100)) as "LineTotal", 
T3."TaxSum" IPI,
IfNULL(T4."TaxSum",0) ICMSST, 
IfNULL(T1."U_FOC_Comissao",0) as "Com"

FROM OINV T0 INNER JOIN INV1 T1 ON T0."DocEntry" = T1."DocEntry"
             INNER JOIN INV4 T3 ON T0."DocEntry" = T3."DocEntry" AND T1."LineNum" = T3."LineNum" AND T3."staType" = 16
             LEFT OUTER JOIN INV4 T4 ON T0."DocEntry" = T4."DocEntry" AND T1."LineNum" = T4."LineNum" AND T4."staType" = 13
             INNER JOIN OSLP T2 ON T0."SlpCode" = T2."SlpCode"
             
WHERE
T0."CANCELED" = 'N' AND
T0."DocDate" between 'Dataini' And 'Datafim' and
t1."Usage" in (52,60) AND
T3."ExpnsCode"=-1 AND
T3."RelateType"=1

UNION ALL

SELECT 
'DS' Doc,
T0."ObjType",
T0."DocEntry", 
T0."DocDate", 
T0."DocDueDate", 
T0."CardCode", 
T0."CardName", 
T0."SlpCode", 
T2."SlpName",
T2."Email",
T0."Serial", 
T1."ItemCode", 
T1."Dscription", 
T1."Quantity", 
T1."Price", 
T1."LineTotal" * (1 - (T0."DiscPrcnt"/100)) * (-1) as "LineTotal", 
(T3."TaxSum")*(-1) IPI,
IfNULL(T4."TaxSum",0) * -1 ICMSST,
(IfNULL(T1."U_FOC_Comissao",0))

FROM ORIN T0 INNER JOIN RIN1 T1 ON T0."DocEntry" = T1."DocEntry"
             INNER JOIN RIN4 T3 ON T0."DocEntry" = T3."DocEntry" AND T1."LineNum" = T3."LineNum" AND T3."staType" = 16
             LEFT OUTER JOIN RIN4 T4 ON T0."DocEntry" = T4."DocEntry" AND T1."LineNum" = T4."LineNum" AND T4."staType" = 13
             INNER JOIN OSLP T2 ON T0."SlpCode" = T2."SlpCode"
             
WHERE
T0."CANCELED" = 'N' and
T0."DocDate" between 'Dataini' And 'Datafim' and t1."Usage" in (52,60) and T3."ExpnsCode"=-1 
AND T3."RelateType"=1) x
group by"SlpName", "Email", "SlpCode"
Order by "SlpName"</value>
  </data>
  <data name="Notas_Fiscais_SQL" xml:space="preserve">
    <value>Select  
'N' as "Selecionado",
"SlpCode" as "Código",
"SlpName" as "Nome do Vendedor",
"Email" as "Email do vendedor",
null as "Data de geração",
sum("LineTotal") as "Total",
sum("IPI") as "IPI",
sum("ICMSST") as "ICMS-ST",
sum(("LineTotal" + isnull("IPI", 0) + isnull("ICMSST", 0))*("Com") )/100 as "Comissão"
 from 
 
 (

SELECT  top 10
'NS' "Doc",
T0."ObjType",
T0."DocEntry", 
T0."DocDate", 
T0."DocDueDate", 
T0."CardCode", 
T0."CardName", 
T0."SlpCode", 
T2."SlpName",
T2."Email",
T0."Serial", 
T1."ItemCode", 
T1."Dscription", 
T1."Quantity", 
T1."Price", 
T1."LineTotal"*(1 - (T0."DiscPrcnt"/100)) as "LineTotal", 
T3."TaxSum" IPI,
IsNULL(T4."TaxSum",0) ICMSST, 
IsNULL(T1."U_FOC_Comissao",0) as "Com"

FROM OINV T0 INNER JOIN INV1 T1 ON T0."DocEntry" = T1."DocEntry"
             LEFT JOIN INV4 T3 ON T0."DocEntry" = T3."DocEntry" AND T1."LineNum" = T3."LineNum" AND T3."staType" = 16
             LEFT JOIN INV4 T4 ON T0."DocEntry" = T4."DocEntry" AND T1."LineNum" = T4."LineNum" AND T4."staType" = 13
             LEFT JOIN OSLP T2 ON T0."SlpCode" = T2."SlpCode"
             
WHERE
T0."CANCELED" = 'N' AND
T0."DocDate" between 'Dataini' And 'Datafim'
--AND t1."Usage" in (52,60) AND
--T3."ExpnsCode"=-1 AND
--T3."RelateType"=1

UNION ALL

SELECT 
'DS' Doc,
T0."ObjType",
T0."DocEntry", 
T0."DocDate", 
T0."DocDueDate", 
T0."CardCode", 
T0."CardName", 
T0."SlpCode", 
T2."SlpName",
T2."Email",
T0."Serial", 
T1."ItemCode", 
T1."Dscription", 
T1."Quantity", 
T1."Price", 
T1."LineTotal" * (1 - (T0."DiscPrcnt"/100)) * (-1) as "LineTotal", 
(T3."TaxSum")*(-1) IPI,
IsNULL(T4."TaxSum",0) * -1 ICMSST,
(IsNULL(T1."U_FOC_Comissao",0))

FROM ORIN T0 INNER JOIN RIN1 T1 ON T0."DocEntry" = T1."DocEntry"
             INNER JOIN RIN4 T3 ON T0."DocEntry" = T3."DocEntry" AND T1."LineNum" = T3."LineNum" AND T3."staType" = 16
             LEFT OUTER JOIN RIN4 T4 ON T0."DocEntry" = T4."DocEntry" AND T1."LineNum" = T4."LineNum" AND T4."staType" = 13
             INNER JOIN OSLP T2 ON T0."SlpCode" = T2."SlpCode"
             
WHERE
T0."CANCELED" = 'N' and
T0."DocDate" between 'Dataini' And 'Datafim' and t1."Usage" in (52,60) and T3."ExpnsCode"=-1 
AND T3."RelateType"=1) x
group by"SlpName", "Email", "SlpCode"
Order by "SlpName"</value>
  </data>
  <data name="Notas_Fiscais_View" xml:space="preserve">
    <value>SELECT 
"Check",
"Doc",
"ObjType",
"DocEntry",
"DocDate",
"CardName",
"SlpCode",
"SlpName",
"Serial",
"Total",
"Comissao",
"U_FOC_CodPN"
From "FOC_Comissao" 
Where
"SlpCode" = 'Vendedor'
And "DocDate" between 'Dataini' And 'Datafim'</value>
  </data>
  <data name="Param_Email" xml:space="preserve">
    <value>SELECT TOP 1 * FROM "@FOC_EMAIL_PARAM"</value>
  </data>
</root>